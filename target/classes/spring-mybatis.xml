<?xml version="1.0" encoding="UTF-8"?>
<beans default-lazy-init="true"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="  
       http://www.springframework.org/schema/beans   
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd  
       http://www.springframework.org/schema/mvc   
       http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd   
       http://www.springframework.org/schema/tx   
       http://www.springframework.org/schema/tx/spring-tx-4.3.xsd   
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util-4.3.xsd
       http://www.springframework.org/schema/data/jpa 
       http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
 		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

	<!-- 整合mybatis中SqlSessionFactroy -->
	<!-- 系统会创建两个bean，一个是sqlSessionFactory以及 SqlSessionFactoryBean -->
	<!-- SqlSessionFactroyBean 此对象底层基于SqlSessionFactroyBuilder创建SqlSessionF -->
	<!-- 所有的FactroyBean'类型的对象由spring管理时会创建两大对象，FactroyBean类型的对象不支持延时加载
		1）FactroyBean子类类型的对象（获取此对象要+&）
		2）FactroyBean中getObject方法返回的对象 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" /><!-- set注入 -->
		<!-- 设置mapper文件的位置 -->
		<property name="MapperLocations"
			value="classpath:mapper/sys/*Mapper.xml" />
	</bean>
	
	<!-- 通过bean对象扫描指定包下的dao接口，并基于接口创建实现类对象 -->
	<!-- 1）系统底层会基于dao接口创建接口的实现类对象
		 2）系统底层会将创建的实现类对象存储到spring容器中
		 2.1）key为接口，默认首字母小写
		 2.2）value为dao接口的实现类对象-->
	 <!-- <bean id="daoScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="BasePackage"
			value="com.db.**.dao" />
			多个数据源时会有多个sqlSessionFactory 
			<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean> -->
	
	<!-- 扫描包如上方式升级 -->
	<mybatis:scan base-package="com.hk.**.dao" factory-ref="sqlSessionFactory"/>

</beans>





